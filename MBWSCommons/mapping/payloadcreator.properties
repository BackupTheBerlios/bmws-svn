# for java
temp.java.targetpath=..\\MBWSCommons\\src\\de\\mbws\\common\\eventdata\\generated
temp.java.classSep=.
temp.java.class=/** Generated class. Do not change !!! **/\n\
package de.mbws.common.eventdata.generated;\n\n\
import de.mbws.common.eventdata.AbstractEventData;\n\
import java.util.*;\n\
import java.nio.ByteBuffer;\n\n\
public class $name$ extends AbstractEventData { \n$fields$\n\
$getandset$\n\
\tpublic void deserialize(ByteBuffer payload) {\n\
$deserialize$}\n\n\
\tpublic int serialize(ByteBuffer payload) {\n\
$serialize$\
\treturn payload.position();\n\t}\n\n\
\tpublic static void serializeList(ByteBuffer payload, List<$name$> list) {\n\
\t\tif(list==null) return;\n\
\t\tpayload.putInt(list.size());\n\
\t\tIterator<$name$> it = list.iterator();\n\
\t\twhile (it.hasNext()) {\n\
\t\t\tit.next().serialize(payload);\n\
\t\t}\n\
\t}\n\n\
\tpublic static List<$name$> deserializeList(ByteBuffer payload) {\n\
\t\tList<$name$> list = new LinkedList<$name$>();\n\
\t\tint size = payload.getInt();\n\
\t\tfor (int i=0; i<size; i++) {\n\
\t\t\t$name$ element = new $name$();\n\
\t\t\telement.deserialize(payload);\n\
\t\t\tlist.add(element);\n\
\t\t}\n\
\t\treturn list;\n\
\t}\n\
}
temp.java.field=\tprivate $type$ $name$;
temp.java.get=\tpublic $type$ get$upname$() {\n\t\treturn $name$;\n\t}
temp.java.set=\tpublic void set$upname$($type$ $name$) {\n\t\tthis.$name$ = $name$;\n\t} 
temp.java.creator=new $type$();\n

# for c++
#temp.cpp.targetpath=..\\c++\\nio\\generatedevents
#temp.cpp.classSep=::
#temp.cpp.class=\#include "AbstractEventData.h";\n\n\
#class $name$ : public AbstractEventData { \n\
#\tprivate:\n$fields$\n\
#\tpublic:\n\
#$getandset$\n\
#\tvoid deserialize(char[] payload, int offset) {\n\
#\t\tsetPayload(payload, offset);\n\
#$deserialize$}\n\n\
#\tint serialize(char[] buffer, int offset) {\n\
#\t\tcursor \= offset;\n\
#$serialize$\
#\treturn cursor;\n\t}\n}}
#temp.cpp.field=\tprivate $type$ $name$;
#temp.cpp.get=\t$type$ get$upname$() {\n\t\treturn $name$;\n\t}
#temp.cpp.set=\tvoid set$upname$($type$ $name$) {\n\t\tthis->$name$ = $name$;\n\t}
#temp.cpp.creator=$type$();

